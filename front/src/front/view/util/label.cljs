(ns front.view.util.label
  (:refer-clojure :exclude [name update]))

(def logout "Logout")
(def login "Login")

(def no-data "No data")
(def name "Name")

(defn- show-key [item keys]
  (if (string? keys)
    (show-key item [keys])
    (if (empty? item)
      no-data
      (->> (for [key keys] (str (key item)))
           (remove empty?)
           first
           (#(or % no-data))))))

(def actions "Actions")
(def api-keys "API keys")
(def api-key "API key")
(defn api-key-item [item] (show-key item [:name :id]))
(def copy "Copy")
(def create "Create")
(def created-at "Created at")
(def dashboard "Dashboard")
(def delete "Delete")
(def devices "Devices")
(defn device [device] (show-key device [:name :id]))
(def device-types "Device types")
(def device-type "Device type")
(defn device-type-item [device-type] (show-key device-type [:name :id]))
(def device-watch-groups "Device watch groups")
(def device-groups "Device groups")
(def edit "Edit")
(def email "Email")
(def files "Files")
(def id "ID")
(def logs "Logs")
(def password "Password")
(def password-again "Password again")
(def password-edit "Edit password")
(def permission "Permission")
(def profile "Profile")
(def show "Show")
(def update "Update")
(def updated-at "Updated at")
(def users "Users")
(defn user [user] (show-key user [:name :email :id]))
(def user-teams "User teams")
(def user-team "User team")
