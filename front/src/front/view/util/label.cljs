(ns front.view.util.label
  (:refer-clojure :exclude [name next time update]))

(def logout "Logout")
(def login "Login")

(def no-data "No data")
(def name "Name")

(defn- show-key [item keys]
  (if (string? keys)
    (show-key item [keys])
    (if (empty? item)
      no-data
      (->> (for [key keys] (str (key item)))
           (remove empty?)
           first
           (#(or % no-data))))))

(def action "Action")
(def add-term "Add term")
(def authorization-bearer "Authorizatino bearer")
(def api-keys "API keys")
(def api-key "API key")
(defn api-key-item [item] (show-key item [:name :id]))
(def close "Close")
(def copy "Copy")
(def copied "Copied")
(def create "Create")
(def created-at "Created at")
(def dashboard "Dashboard")
(defn datetime-from-item [str-datetiem-from]
  (str "from " str-datetiem-from))
(defn datetime-until-item [str-datetiem-from]
  (str "until " str-datetiem-from))
(def delete "Delete")
(def device "Device")
(def devices "Devices")
(defn device-item [device] (show-key device [:name :id]))
(def device-types "Device types")
(def device-type "Device type")
(defn device-type-item [device-type] (show-key device-type [:name :id]))
(def device-groups "Device groups")
(def edit "Edit")
(def email "Email")
(def files "Files")
(def from "From")
(def get-bearer "Get bearer")
(def hide "Hide")
(def id "ID")
(def invalid-date "Invalid date")
(def logs "Logs")
(def next "Next")
(def no-file-to-show "No file to show")
(def no-term "No term")
(def password "Password")
(def password-again "Password again")
(def password-edit "Edit password")
(def permission "Permission")
(def prev "Prev")
(def profile "Profile")
(def show "Show")
(def term "Term")
(def terms "Terms")
(def time "Time")
(def until "Until")
(def update "Update")
(def updated-at "Updated at")
(defn user [user] (show-key user [:name :email :id]))
(def users "Users")
(def user-team "User team")
(defn user-team-item [item] (show-key item [:name]))
(def user-teams "User teams")
(def watch-scope "Watch scope")
(def watch-scopes "Watch scopes")
(defn watch-scope-item [item] (show-key item [:name :id]))
